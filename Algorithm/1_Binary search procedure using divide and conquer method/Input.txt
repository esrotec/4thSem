#include <stdio.h>


#define MAX_SIZE 100


// Binary search function
int binarySearch(int arr[], int left, int right, int target) {
    if (right >= left) {
        int mid = left + (right - left) / 2;


        // If the target element is present at the middle
        if (arr[mid] == target)
            return mid;


        // If the target element is smaller than the middle element, search in the left subarray
        if (arr[mid] > target)
            return binarySearch(arr, left, mid - 1, target);


        // If the target element is greater than the middle element, search in the right subarray
        return binarySearch(arr, mid + 1, right, target);
    }


    // Element is not present in the array
    return -1;
}


// Bubble sort function
void bubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1]) {
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}


// Main function
int main() {
    int n, target;


    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);


    if (n > MAX_SIZE) {
        printf("Array size exceeds the maximum limit.\n");
        return 1;
    }


    int arr[MAX_SIZE];


    printf("Enter the elements of the array:\n");
    for (int i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }


    // Sort the array using bubble sort
    bubbleSort(arr, n);


    printf("Sorted array: ");
    for (int i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");


    printf("Enter the target element to search: ");
    scanf("%d", &target);


    int result = binarySearch(arr, 0, n - 1, target);


    if (result == -1)
        printf("Element not found in the array.\n");
    else
        printf("Element found at index %d.\n", result);


    return 0;
}
